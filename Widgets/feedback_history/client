	api.controller = function($scope, $http, $window, $timeout) {
		var fl = this;

		// Initialize variables
		fl.feedbacks = [];
		fl.teamMemberName = '';
		fl.teamLeadName = '';
		fl.teamLeadSysID = '';
		fl.selectedFeedback = {};
		fl.recordID = '';
		fl.showModal = false;
		fl.currentPage = 1; // Current page number
		fl.itemsPerPage = 5; // Number of items per page
		fl.totalItems = 0; // Total number of items
		fl.noPages = '';
		fl.copyfeedbacks = [];
		fl.weekStartDate = '';
		fl.weekEndDate = '';
		fl.sysID = '';

		 // Filter variables
		fl.filterStartDate = '';
		fl.filterEndDate = '';

		fl.feedbackText = '';
		fl.extraContribution = '';
		fl.showPopUp = false;
		fl.showBackToTop = true;
		
	fl.userInfo = [];
		
		// Function to scroll the feedback list back to the top
		fl.scrollToTop = function() {
    var container = document.getElementById('feedback-list'); 
		if (container){
			container.scrollTo({ top: 0, behavior: 'smooth' });
		}else{
			console.error("Container not found: feedback-list-container");
		}
   
};
		
		// Function to load user information
function loadUserInfo() {
    $http.get('/api/x_1462550_feedback/logged_user/userinfo')
    .then(function(response) {
        if (response.data) {
            fl.userInfo = response.data; // Assign the entire response data to fl.userInfo
            console.log('User Information loaded:', fl.userInfo); // Print the loaded user information
        } else {
            console.error('No user information found in response');
        }
    }, function(error) {
        console.error('Error loading user information:', error);
    });
}

// Function to redirect to the homepage with URL parameters
  fl.goBackToHome = function() {
    var startDate = fl.weekStartDate;
    var endDate = fl.weekEndDate;

    // Redirect to the homepage with start_date and end_date as URL parameters
    var homepageUrl = '/feedback?id=homepage&week_start_date=' + encodeURIComponent(startDate) + '&week_end_date=' + encodeURIComponent(endDate);
    $window.location.href = homepageUrl;
  };
		
	 // Initialization function
function initialize() {
    var teamMemberName = getUrlParameter('team_member_name');
		var weekStartDate = getUrlParameter('week_start_date');
		fl.weekStartDate = weekStartDate;
		//fl.filterStartDate = new Date(weekStartDate);
		var weekEndDate = getUrlParameter('week_end_date');
		fl.weekEndDate = weekEndDate;
		//fl.filterEndDate = new Date(weekEndDate);
    console.log('Initializing controller with teamMemberName:', teamMemberName);
		console.log('Initializing controller with Start Date:', weekStartDate);
		console.log('Initializing controller with End Date:', weekEndDate);

    if (teamMemberName) {
        // Replace the URL with your scripted REST API endpoint
        $http.get('/api/x_1462550_feedback/feedbackapi/feedback', {
            params: { team_member_name: teamMemberName }
        }).then(function(response) {
            console.log('API response for GET request:', response);
            if (response.data && response.data.length > 0) {
                fl.feedbacks = response.data.map(function(feedback) {
                    var sub_state = '';
                    console.log('submission status :', feedback.submission_status);
                    if (feedback.submission_status === '1') {
                        sub_state = 'Submitted';
                    } else if (feedback.submission_status === '0') {
                        sub_state = 'Pending';
                    }
                    return {
												sys_id: feedback.sys_id,
                        team_lead: feedback.team_lead,
                        record_id: feedback.record_id,
                        period: (feedback.starting_from && feedback.ends_on) ?
                                    feedback.starting_from + ' - ' + feedback.ends_on :
                                    'Feedback is still in progress',
                        dateCreated: feedback.date_created,
                        status: sub_state,
                        startingFrom: feedback.starting_from,
                        endOn: feedback.ends_on,
                        feedbackText: feedback.feedback_text,
                        comments: feedback.comments,
                        technical_knowledge: feedback.technical_knowledge,
                        communication: feedback.communication,
                        teamwork: feedback.teamwork,
                        leadership: feedback.leadership,
                        commitment: feedback.commitment,
                        extra_contribution: feedback.extra_contribution
                    };
                });

                // Sorting: First by submission_status (Pending first), then by starting_from
                fl.feedbacks.sort(function(a, b) {
                    // Sort by submission_status (Pending first)
                    if (a.status === 'Pending' && b.status !== 'Pending') return -1;
                    if (a.status !== 'Pending' && b.status === 'Pending') return 1;

                    // If status is the same, sort by starting_from ascending
                    if (a.startingFrom > b.startingFrom) return -1;
                    if (a.startingFrom < b.startingFrom) return 1;

                    return 0;
                });

                fl.teamMemberName = teamMemberName;
								fl.teamLeadName = fl.userInfo.name;
								fl.teamLeadSysID = fl.userInfo.sysID;
                console.log('Feedbacks loaded:', fl.feedbacks);
                fl.totalItems = fl.feedbacks.length;
                fl.noPages = Math.ceil(fl.totalItems / fl.itemsPerPage);
                fl.DisplayedFeedbacks();
                console.log('Total feedbacks : ', fl.totalItems);
            } else {
                fl.teamMemberName = teamMemberName;
								fl.teamLeadName = fl.userInfo.name;
								fl.teamLeadSysID = fl.userInfo.sysID;
                fl.feedbacks = [];
                fl.totalItems = 0;
                console.log('No feedbacks found for team member:', teamMemberName);
            }
        }, function(error) {
            alert('Error loading feedbacks');
            console.error('Error in loadFeedbacks:', error);
        });

    } else {
        alert('Invalid team member.');
        console.log('Invalid teamMemberName:', teamMemberName);
    }
}


		 // Function to generate a unique record ID
		function generateUniqueRecordId(callback) {
			var recordId = 'RID' + new Date().getTime(); // Generate ID based on timestamp
			$http.get('/api/now/table/x_1462550_feedback_feedbacktable', {
				params: { record_id: recordId }
			}).then(function(response) {
				if (response.data.result.length > 0) {
					// If the record_id is not unique, recursively call the function
					generateUniqueRecordId(callback);
				} else {
					// If the record_id is unique, return it
					callback(recordId);
				}
			}, function(error) {
				console.error('Error checking record ID uniqueness:', error);
				alert('Error generating unique record ID');
			});
		}


		// Function to get URL parameter
		function getUrlParameter(name) {
			var regex = new RegExp('[?&]' + name + '=([^&#]*)');
			var results = regex.exec($window.location.search);
			return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
		}

		// Function to view feedback details
		fl.viewDetails = function(feedback) {
			fl.selectedFeedback = feedback;
			console.log('Selected feedback for details:', fl.selectedFeedback);
			console.log('Selected feedback comments:', fl.selectedFeedback.comments);
			fl.showModal = true;

			// Add the 'show' class after a slight delay to trigger the transition
		setTimeout(function() {
			document.querySelector('.modal').classList.add('show');
		}, 20); // 10ms delay to ensure the DOM is updated
		};

		// Function to close modal
	fl.closeModal = function() {
		// Remove the 'show' class to start the transition
		var modalElement = document.querySelector('.modal');
		modalElement.classList.remove('show');

		// After the transition ends, hide the modal
		setTimeout(function() {
			fl.showModal = false;
			$scope.$apply(); // Apply scope changes after the transition
		}, 300); // Match this delay to your CSS transition duration
	};

	// Helper function to get the Monday and Sunday of the week
	function getWeekDates(date) {
		var startDate = new Date(date);
		var day = startDate.getDay();

		// Calculate Monday
		var diffToMonday = (day === 0 ? -6 : 1 - day); // Adjust if the day is Sunday (0) to be -6 days
		var monday = new Date(startDate); // Create a new date object for Monday
		monday.setDate(startDate.getDate() + diffToMonday);
		console.log('Monday : ', monday);

		// Calculate Sunday
		var sunday = new Date(monday); // Create a new date object based on the calculated Monday
		sunday.setDate(monday.getDate() + 6); // Add 6 days to get Sunday
		console.log('Sunday : ', sunday);

		// Format dates to yyyy-mm-dd
		var formatDate = function(d) {
			var month = '' + (d.getMonth() + 1);
			var day = '' + d.getDate();
			var year = d.getFullYear();

			if (month.length < 2) month = '0' + month;
			if (day.length < 2) day = '0' + day;

			return [year, month, day].join('-');
		};

		return {
			startingFrom: monday,
			endsOn: sunday
		};
	}

	// Function to create a new feedback record
	fl.createNewFeedback = function(teamMemberName, teamLeadName) {
		if (teamMemberName && teamLeadName) {
			// Check if there are pending feedbacks
			var hasPendingFeedbacks = fl.feedbacks.some(function(feedback) {
				console.log('status feedback : ', feedback.status);
				return feedback.status === 'Pending';
			});

			if (hasPendingFeedbacks) {
				fl.errorMessage = 'There is an existing feedback that is pending. Please submit it before giving a new feedback.';
				fl.showErrorModal = true; // Show the error modal
				// Add the 'show' class after a slight delay to trigger the transition
				setTimeout(function() {
					console.log('awa');
				document.querySelector('.error-modal').classList.add('show');
				}, 20); // 10ms delay to ensure the DOM is updated

			} else {
				var dateformat = new Date();
				console.log('Created Date : ', dateformat);

				var weekDates = getWeekDates(dateformat); // Get Monday and Sunday of the week

				
					var newFeedback = {
						
						team_member_name: teamMemberName,
						team_lead_name: fl.userInfo.name,
						date_created: formatDate(dateformat), // Use current date in ISO format
						submission_status: 'Pending', // Set to Pending initially
						starting_from: fl.weekStartDate, // Set starting_from to Monday
						ends_on: fl.weekEndDate, // Set ends_on to Sunday
						feedback_text: '', // Initialize with empty or pre-defined text
						comments: JSON.stringify([]), // Initialize with an empty array of comments
						technical_knowledge: '', // Initialize other fields as needed
						communication: '',
						teamwork: '',
						leadership: '',
						commitment: '',
						extra_contribution: ''
					};
					$http.post('/api/x_1462550_feedback/feedbackapi/create_feedback', newFeedback)
						.then(function(response) {
						console.log('API Post create feedback :' ,response);
						var sysID = response.data.result.sys_id;
						console.log('SysID for param: ',sysID);
							// Redirect to the new feedback form page with record_id and team_member_name
							var formPageUrl = '/feedback?id=form_page&team_member_name=' + teamMemberName + '&sys_id=' + sysID + '&week_start_date=' + fl.weekStartDate + '&week_end_date=' + fl.weekEndDate;
							$window.location.href = formPageUrl;
						}, function(error) {
							fl.errorMessage = 'Error creating new feedback record';
							fl.showErrorModal = true; // Show the error modal
							console.error('Error in createNewFeedback:', error);
						});
				}
		} else {
			alert('Invalid team member or team lead selected');
			console.log('Error Team Member : ', teamMemberName);
			console.log('Error Team Lead : ', teamLeadName);
		}
	};



		// Function to format the date manually as yyyy-mm-dd
		function formatDate(date) {
			var d = new Date(date);
			var month = '' + (d.getMonth() + 1);
			var day = '' + d.getDate();
			var year = d.getFullYear();

			if (month.length < 2) month = '0' + month;
			if (day.length < 2) day = '0' + day;

			return [year, month, day].join('-');
		}

		// Redirect to form_page
		fl.redirectToFormPage = function(feedback) {
			fl.selectedFeedback = feedback;
			console.log('Feedback loaded', fl.selectedFeedback);
			console.log('redirect member :',fl.teamMemberName);
			console.log('redirect id :',fl.selectedFeedback.record_id);
				 var formPageUrl = '/feedback?id=form_page&team_member_name=' + fl.teamMemberName + '&record_id=' + fl.selectedFeedback.record_id + '&week_start_date=' + fl.weekStartDate + '&week_end_date=' + fl.weekEndDate;
				 $window.location.href = formPageUrl;
		};

			// Function to close the error modal
		fl.closeErrorModal = function() {
			 // Remove the 'show' class to start the transition
		var modalElement = document.querySelector('.error-modal');
		modalElement.classList.remove('show');

		// After the transition ends, hide the modal
		setTimeout(function() {
			fl.showErrorModal = false;
			$scope.$apply(); // Apply scope changes after the transition
		}, 300); // Match this delay to your CSS transition duration
		};

		fl.DisplayedFeedbacks = function() {
    fl.isLoading = true;
    fl.leaving = true;

    $timeout(function() {
        var startIndex = (fl.currentPage - 1) * fl.itemsPerPage;
        var endIndex = startIndex + fl.itemsPerPage;

        // Create a copy of the feedbacks array
        fl.copyfeedbacks = fl.feedbacks.slice(); // Make a shallow copy of the feedbacks array
        
        // Update displayedFeedbacks based on copyfeedbacks
        fl.displayedFeedbacks = fl.copyfeedbacks.slice(startIndex, endIndex);

        console.log('Updated Displayed Feedbacks:', fl.displayedFeedbacks);
        console.log('Feedbacks Copy:', fl.copyfeedbacks);

        // Ensure old items are hidden
        var feedbackItems = document.querySelectorAll('.feedback-item');
        feedbackItems.forEach(function(item) {
            item.classList.remove('show'); // Hide all items before applying staggered effect
        });

        // Apply staggered effect
        $timeout(function() {
            var newFeedbackItems = document.querySelectorAll('.feedback-item');
            newFeedbackItems.forEach(function(item, index) {
                $timeout(function() {
                    item.classList.add('show'); // Apply the show class with delay
                }, index * 300); // Adjust the delay as needed
            });
        }, 300); // Delay before starting the staggered effect

        fl.leaving = false;
        fl.entering = true;
        fl.isLoading = false;

        $timeout(function() {
            fl.entering = false;
        }, 300);
    }, 300);
};

fl.updateDisplayedFeedbacks = function() {
		fl.isLoading = true;
    fl.leaving = true;
    $timeout(function() {
						var startIndex = (fl.currentPage - 1) * fl.itemsPerPage;
            var endIndex = startIndex + fl.itemsPerPage;
        // Check if fl.copyfeedbacks is available and has items
        if (fl.copyfeedbacks && fl.copyfeedbacks.length > 0) {
            // Update displayedFeedbacks based on copyfeedbacks
            fl.displayedFeedbacks = fl.copyfeedbacks.slice(startIndex, endIndex);
        } else {
            fl.displayedFeedbacks = [];
        }

        console.log('Updated Displayed Feedbacks:', fl.displayedFeedbacks);
 // Ensure old items are hidden
        var feedbackItems = document.querySelectorAll('.feedback-item');
        feedbackItems.forEach(function(item) {
            item.classList.remove('show'); // Hide all items before applying staggered effect
        });

        // Apply staggered effect
        $timeout(function() {
            var newFeedbackItems = document.querySelectorAll('.feedback-item');
            newFeedbackItems.forEach(function(item, index) {
                $timeout(function() {
                    item.classList.add('show'); // Apply the show class with delay
                }, index * 300); // Adjust the delay as needed
            });
        }, 300); // Delay before starting the staggered effect
        fl.leaving = false;
        fl.entering = true;
				fl.isLoading = false;
        $timeout(function() {
            fl.entering = false;
						
        }, 300);
    }, 300);
};


		// Function to change page with smooth transition
	fl.changePage = function(pageNumber) {
		if (pageNumber > 0 && pageNumber <= fl.noPages) {
			var feedbackListElement = document.getElementById('feedback-list');

			// Add the leave class to trigger the transition
			feedbackListElement.classList.add('ng-leave');

			// Set a timeout to wait for the transition to complete before updating the feedbacks
			setTimeout(function() {
				fl.currentPage = pageNumber;
				fl.updateDisplayedFeedbacks();

				// Remove the leave class and add the enter class to trigger the enter transition
				feedbackListElement.classList.remove('ng-leave');
				feedbackListElement.classList.add('ng-enter');

				// Remove the enter class after the transition is done
				setTimeout(function() {
					feedbackListElement.classList.remove('ng-enter');
				}, 300);
			}, 300); 
		}
	};


// Function to filter feedbacks by date range
fl.filterFeedbacks = function() {
    fl.currentPage = 1;

    var startDate = formatDate(fl.filterStartDate);
    console.log('Formatted Start Date:', startDate);
    
    var endDate = formatDate(fl.filterEndDate);
    console.log('Formatted End Date:', endDate);

    fl.copyfeedbacks = fl.feedbacks.filter(function(feedback) {
        var feedbackStartDate = formatDate(feedback.startingFrom);
        var feedbackEndDate = formatDate(feedback.endOn);

        console.log('Feedback Start Date:', feedbackStartDate);
        console.log('Feedback End Date:', feedbackEndDate);

        // Check if feedback dates are valid
        if (!feedbackStartDate || !feedbackEndDate) {
            console.log('Invalid feedback date:', feedbackStartDate, feedbackEndDate);
            return false;
        }

        // Check if feedback is within range
        var isWithinRange = (!startDate || feedbackStartDate >= startDate) &&
                            (!endDate || feedbackEndDate <= endDate);
        console.log('Feedback within range:', isWithinRange);

        return isWithinRange;
    });

    // Sort feedbacks to have 'Pending' status on top
    fl.copyfeedbacks.sort(function(a, b) {
        if (a.status === 'Pending' && b.status !== 'Pending') return -1;
        if (a.status !== 'Pending' && b.status === 'Pending') return 1;
        return 0;
    });

    // Update pagination details
    fl.totalItems = fl.copyfeedbacks.length;
    fl.noPages = Math.ceil(fl.totalItems / fl.itemsPerPage);

    // Update displayed feedbacks
    fl.updateDisplayedFeedbacks();

    console.log('Filtered Feedbacks:', fl.copyfeedbacks);
    console.log('Total Items:', fl.totalItems);
    console.log('Number of Pages:', fl.noPages);
};


		// Function to clear date range filter
		fl.clearFilter = function() {
			fl.filterStartDate = '';
			fl.filterEndDate = '';
			fl.copyfeedbacks = angular.copy(fl.feedbacks);

				// Sort feedbacks to have 'Pending' status on top
		fl.copyfeedbacks.sort(function(a, b) {
			if (a.status === 'Pending' && b.status !== 'Pending') {
				return -1;
			} else if (a.status !== 'Pending' && b.status === 'Pending') {
				return 1;
			}
			return 0; // Maintain original order if both are the same status
		});

			fl.totalItems = fl.copyfeedbacks.length;
			fl.noPages = Math.ceil(fl.totalItems / fl.itemsPerPage);
			fl.updateDisplayedFeedbacks();
		};

		fl.refreshwidget = function() {
    var feedbackListElement = document.getElementById('feedback-list');

    // Add the leave class to trigger the transition
    feedbackListElement.classList.add('ng-leave');

    // Set a timeout to wait for the transition to complete before updating the feedbacks
    setTimeout(function() {
        // Clear the filter criteria
        fl.filterStartDate = '';
        fl.filterEndDate = '';

        // Reset the copy of feedbacks
        fl.copyfeedbacks = angular.copy(fl.feedbacks);

        // Sort feedbacks to have 'Pending' status on top
        fl.copyfeedbacks.sort(function(a, b) {
            if (a.status === 'Pending' && b.status !== 'Pending') {
                return -1;
            } else if (a.status !== 'Pending' && b.status === 'Pending') {
                return 1;
            }
            return 0; // Maintain original order if both are the same status
        });

        // Reset pagination
        fl.currentPage = 1;
        fl.totalItems = fl.copyfeedbacks.length;
        fl.noPages = Math.ceil(fl.totalItems / fl.itemsPerPage);

        // Update the displayed feedbacks
        fl.updateDisplayedFeedbacks();

        // Remove the leave class and add the enter class to trigger the enter transition
        feedbackListElement.classList.remove('ng-leave');
        feedbackListElement.classList.add('ng-enter');

        // Remove the enter class after the transition is done
        setTimeout(function() {
            feedbackListElement.classList.remove('ng-enter');
        }, 300); 
    }, 300); 
};

		
		// Function to show the confirmation modal
  fl.showConfirmation = function(feedback) {
		console.log('feedback:',feedback);
		fl.sysID = feedback.sys_id;
		console.log('Selecred record record ID : ',fl.sysID);
    if (fl.feedbackText) {
      fl.showPopUp = true;
			document.querySelector('.confirmation-popup').classList.add('show');
    } else {
      alert('Please enter all required fields.');
    }
  };

  // Function to close the modal without submitting
  fl.closePopUpModal = function() {
     document.querySelector('.confirmation-popup').classList.remove('show');
        $timeout(function() {
            fl.showPopUp = false;
        }, 300); // Delay to allow the transition to complete
  };

  // Function to confirm and submit the form
  fl.confirmSubmit = function() {
    fl.showPopUp = false;
    fl.submitForm();
  };

 // Function to submit the form
fl.submitForm = function() {
    if ( fl.feedbackText) {
        var data = {
            starting_from: formatDate(fl.startingFrom),
            ends_on: formatDate(fl.endOn),
            feedback_text: fl.feedbackText,
            extra_contribution: fl.extraContribution,
            submission_status: true
        };

        // First, check if a record with the given sysID exists
        $http.get('/api/x_1462550_feedback/feedbackapi/feedback/' + fl.sysID).then(function(response) {
            var feedbackRecord = response.data;
            console.log('Feedback loaded to check : ', feedbackRecord);
            if (feedbackRecord) {
                // Update existing record
                $http.patch('/api/x_1462550_feedback/feedbackapi/update_feedback/' + fl.sysID, data).then(function(response) {
                    alert('Feedback updated successfully!');
                    fl.resetForm();
                }, function(error) {
                    alert('Error updating feedback');
                    console.error('Error in submitForm (PATCH):', error);
                });
            } else {
                // Create new record
                //data.record_id = fl.recordID; // Make sure to include recordID in new record data
                $http.post('/api/now/table/x_1462550_feedback_feedbacktable', data).then(function(response) {
                    alert('Feedback submitted successfully!');
                    fl.resetForm();
									
                }, function(error) {
                    alert('Error submitting feedback');
                    console.error('Error in submitForm (POST):', error);
                });
            }
        }, function(error) {
            alert('Error retrieving feedback record');
            console.error('Error in submitForm (GET):', error);
        });
    } else {
        alert('Please enter all required fields.');
    }
};
  // Function to reset the form
  fl.resetForm = function() {
    fl.startingFrom = '';
    fl.endOn = '';
    fl.teamLead = '';
    //fl.teamMember = '';
    fl.feedbackText = '';
    fl.comments = [];
   	fl.technicalKnowledge = 1;
    fl.communication = 1;
    fl.teamwork = 1;
    fl.leadership = 1;
    fl.commitment = 1;
    fl.extraContribution = 1;
    fl.feedbackRecordSysId = '';
    fl.week = ''; // Reset week field

    initialize();
		var homepageUrl = '';
		console.log('Taken user roles : ',fl.userInfo.roles);

		// Check for HR Lead role
				if (fl.userInfo.roles.includes('x_1462550_feedback.HR Lead')) {
						homepageUrl = '/feedback?id=feedback_page_two&team_member_name=' + encodeURIComponent(fl.teamMemberName) + 
													'&week_start_date=' + encodeURIComponent(fl.weekStartDate) + 
													'&week_end_date=' + encodeURIComponent(fl.weekEndDate);
				}
				// Check for Team Lead role
				else if (fl.userInfo.roles.includes('x_1462550_feedback.team lead')) {
						homepageUrl = '/feedback?id=feedback_page_one&team_member_name=' + encodeURIComponent(fl.teamMemberName) + 
													'&week_start_date=' + encodeURIComponent(fl.weekStartDate) + 
													'&week_end_date=' + encodeURIComponent(fl.weekEndDate);
				} else {
						// Default redirection to the homepage if the user has neither role
						homepageUrl = '/feedback?id=homepage&week_start_date=' + encodeURIComponent(fl.weekStartDate) + 
													'&week_end_date=' + encodeURIComponent(fl.weekEndDate);
				}

				// Redirect to the appropriate URL
				$window.location.href = homepageUrl;

  };

		
		
		
		
		

		loadUserInfo();
		// Initialize the controller
		initialize();
	};

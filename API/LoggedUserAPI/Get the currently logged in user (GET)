/api/x_1462550_feedback/logged_user/userinfo


(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    try {
        // Get the logged-in user's sys_id
        var userId = gs.getUserID();
        
        // Create a GlideRecord object for the sys_user table to get the logged-in user's details
        var userGr = new GlideRecord('sys_user');
        
        if (userGr.get(userId)) {
            // Retrieve the user's name and email
            var userInfo = {
				sysID : userId,
                name: userGr.getValue('name'),
                email: userGr.getValue('email'),
                roles: [] // Initialize an array for storing roles
            };

            // Get the user's roles from sys_user_has_role table using user sys_id
            var roleGr = new GlideRecord('sys_user_has_role');
            roleGr.addQuery('user', userId); // Query by the user's sys_id
            roleGr.query();

            // Loop through the roles and log each result
            while (roleGr.next()) {
                var roleId = roleGr.getValue('role'); // Get the role sys_id
                var roleNameGr = new GlideRecord('sys_user_role'); // Query sys_user_role table
                if (roleNameGr.get(roleId)) {
                    var roleName = roleNameGr.getValue('name'); // Access the role name
                    userInfo.roles.push(roleName);   // Add the role name to the roles array
                    // Log each role for debugging purposes
                    gs.info('Role added: ' + roleName);
                } else {
                    gs.warn('Role ID not found: ' + roleId);
                }
            }

            // Log the complete user information for debugging purposes
            gs.info('User info logged in: ' + JSON.stringify(userInfo));

            // Convert the userInfo object to a JSON string
            var jsonResponse = JSON.stringify(userInfo);

            // Set the response status, content type, and body
            response.setStatus(200);
            response.setHeader('Content-Type', 'application/json');
            response.getStreamWriter().writeString(jsonResponse);
        } else {
            // Handle case where user record is not found
            response.setStatus(500);
            response.setHeader('Content-Type', 'application/json');
            response.getStreamWriter().writeString(JSON.stringify({
                error: 'User record not found for sys_id: ' + userId
            }));
        }

    } catch (e) {
        // Log the error for debugging
        gs.error("Error in scripted REST API: " + e.message);

        // Set the response status, content type, and body
        response.setStatus(500);
        response.setHeader('Content-Type', 'application/json');
        
        // Send a JSON error response
        var errorResponse = JSON.stringify({ error: "Internal Server Error" });
        response.getStreamWriter().writeString(errorResponse);
    }
})(request, response);
